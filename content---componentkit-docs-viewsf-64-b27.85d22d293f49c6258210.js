(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{115:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return s}),t.d(n,"rightToc",function(){return r}),t.d(n,"default",function(){return p});t(0);var a=t(125);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s={id:"views",title:"Views"},r=[{value:"Primitive Arguments",id:"primitive-arguments",children:[]},{value:"Viewless Components",id:"viewless-components",children:[]},{value:"Advanced Views",id:"advanced-views",children:[]}],l={rightToc:r},c="wrapper";function p(e){var n=e.components,t=o(e,["components"]);return Object(a.b)(c,i({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Create components using the ",Object(a.b)("inlineCode",{parentName:"p"},"newWithView:size:")," class method:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-objectivec"}),"+ (instancetype)newWithView:(const CKComponentViewConfiguration &)view\n                       size:(const CKComponentSize &)size;\n")),Object(a.b)("p",null,"It's important to note that you don't pass a ",Object(a.b)("inlineCode",{parentName:"p"},"UIView")," directly, but a ",Object(a.b)("inlineCode",{parentName:"p"},"CKComponentViewConfiguration"),". What's that?"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-objectivec"}),"struct CKComponentViewConfiguration {\n  CKComponentViewClass viewClass;\n  std::unordered_map<CKComponentViewAttribute, id> attributes;\n};\n")),Object(a.b)("p",null,"The first field is a view class. Ignore ",Object(a.b)("inlineCode",{parentName:"p"},"CKComponentViewClass")," for now — in most cases you just pass a class like ",Object(a.b)("inlineCode",{parentName:"p"},"[UIImageView class]")," or ",Object(a.b)("inlineCode",{parentName:"p"},"[UIButton class]"),"."),Object(a.b)("p",null,"The second field holds a map of attributes to values: font, color, background image, and so forth. Again, ignore ",Object(a.b)("inlineCode",{parentName:"p"},"CKComponentViewAttribute")," for now; you can usually use a ",Object(a.b)("inlineCode",{parentName:"p"},"SEL")," as the attribute."),Object(a.b)("p",null,"Let's put one together:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-objectivec"}),"[CKComponent\n newWithView:{\n   [UIImageView class],\n   {\n     {@selector(setImage:), image},\n     {@selector(setContentMode:), @(UIViewContentModeCenter)} // Wrapping into an NSNumber\n   }\n }\n size:{image.size.width, image.size.height}];\n")),Object(a.b)("p",null,"That's all there is to it. ComponentKit does this for us:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Automatically creates or reuses a ",Object(a.b)("inlineCode",{parentName:"li"},"UIImageView")," when the component is mounted"),Object(a.b)("li",{parentName:"ul"},"Automatically calls ",Object(a.b)("inlineCode",{parentName:"li"},"setImage:")," and ",Object(a.b)("inlineCode",{parentName:"li"},"setContentMode:")," with the given values"),Object(a.b)("li",{parentName:"ul"},"Skips calling ",Object(a.b)("inlineCode",{parentName:"li"},"setImage:")," or ",Object(a.b)("inlineCode",{parentName:"li"},"setContentMode:")," if the value is unchanged between two updates — the most common case when updating a tree.")),Object(a.b)("h2",null,Object(a.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"primitive-arguments"})),Object(a.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#primitive-arguments"}),"#"),"Primitive Arguments"),Object(a.b)("p",null,"The values in the map are of type ",Object(a.b)("inlineCode",{parentName:"p"},"id"),", so if you want to pass in primitive types like ",Object(a.b)("inlineCode",{parentName:"p"},"BOOL"),", you have to wrap them into an ",Object(a.b)("inlineCode",{parentName:"p"},"NSValue")," object using e.g. ",Object(a.b)("inlineCode",{parentName:"p"},"@(value)")," and ComponentKit will unwrap them."),Object(a.b)("h2",null,Object(a.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"viewless-components"})),Object(a.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#viewless-components"}),"#"),"Viewless Components"),Object(a.b)("p",null,"Often there exist logical components that don't need a corresponding view in the view hierarchy. For example a ",Object(a.b)("inlineCode",{parentName:"p"},"CKStackLayoutComponent")," often doesn't need to have a view; it only needs to position various subviews inside a designated area. In such situations, just pass ",Object(a.b)("inlineCode",{parentName:"p"},"{}")," for the view configuration and no view is created. For example:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-objectivec"}),"[CKComponent newWithView:{} size:{}]\n")),Object(a.b)("p",null,"(You can also just use ",Object(a.b)("inlineCode",{parentName:"p"},"+new")," directly, which uses this as the default.)"),Object(a.b)("h2",null,Object(a.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"advanced-views"})),Object(a.b)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#advanced-views"}),"#"),"Advanced Views"),Object(a.b)("p",null,"This is sufficient for most cases, but there is considerably more power when you need it. See ",Object(a.b)("a",i({parentName:"p"},{href:"advanced-views"}),"Advanced Views")," if you want to learn more."))}p.isMDXComponent=!0}}]);