(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{55:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",function(){return a}),n.d(e,"rightToc",function(){return p}),n.d(e,"default",function(){return u});n(0);var r=n(125);function o(){return(o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function i(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var a={title:"Avoid Width 100%",id:"avoid-width-100-percent"},p=[],c={rightToc:p},s="wrapper";function u(t){var e=t.components,n=i(t,["components"]);return Object(r.b)(s,o({},c,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Avoid doing this:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-objectivec-redhighlight"}),"@implementation ArtistComponent\n+ (instancetype)newWithArtist:(ArtistModel *)artist\n{\n  return [super newWithComponent:\n          [CKComponent\n           newWithView:{[ArtistView class], ...}\n           size:{.width = Percent(1.0)}]];\n}\n@end\n")),Object(r.b)("p",null,"Instead, favor an approach using ",Object(r.b)("inlineCode",{parentName:"p"},"size:{}")," and requiring the parent of ",Object(r.b)("inlineCode",{parentName:"p"},"ArtistComponent")," to specify its width. For example, if the parent is a ",Object(r.b)("inlineCode",{parentName:"p"},"CKStackLayoutComponent"),", use ",Object(r.b)("inlineCode",{parentName:"p"},"CKStackLayoutAlignItemsStretch")," to stretch the component to full width."),Object(r.b)("p",null,"This keeps components reusable in situations where you don't want them to be 100% of the parent's width."))}u.isMDXComponent=!0}}]);