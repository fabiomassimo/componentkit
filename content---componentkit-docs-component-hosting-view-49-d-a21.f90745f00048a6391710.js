(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{65:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return r}),t.d(n,"rightToc",function(){return s}),t.d(n,"default",function(){return d});t(0);var i=t(125);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}function a(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r={title:"Component Hosting View"},s=[{value:"Setting the model",id:"setting-the-model",children:[]},{value:"Size Range Provider",id:"size-range-provider",children:[]},{value:"Layout",id:"layout",children:[]}],l={rightToc:s},c="wrapper";function d(e){var n=e.components,t=a(e,["components"]);return Object(i.b)(c,o({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"So you've created a component and now need some way to render it on screen. If your use case involves using components inside a ",Object(i.b)("inlineCode",{parentName:"p"},"UICollectionView"),", you should be using ",Object(i.b)("inlineCode",{parentName:"p"},"CKCollectionViewDataSource"),". However, there are some cases where you want to render a component standalone. ",Object(i.b)("inlineCode",{parentName:"p"},"CKComponentHostingView")," was built for this purpose."),Object(i.b)("h2",null,Object(i.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"setting-the-model"})),Object(i.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#setting-the-model"}),"#"),"Setting the model"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"CKComponentHostingView")," provides a ",Object(i.b)("inlineCode",{parentName:"p"},"updateModel:mode:")," method that you can call to update the model for the hosting view. Similarly a secondary context object is also provided. Updating either model or context will trigger a re-generation of the component in the hosting view."),Object(i.b)("h2",null,Object(i.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"size-range-provider"})),Object(i.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#size-range-provider"}),"#"),"Size Range Provider"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"CKComponentHostingView")," requires a size range provider to be passed into the initializer. The size range provider is an object that responds to a single method (",Object(i.b)("inlineCode",{parentName:"p"},"-sizeRangeForBoundingSize:"),") that calculates a constraining size for a given view bounding size."),Object(i.b)("p",null,"Typically you'll want to use ",Object(i.b)("inlineCode",{parentName:"p"},"CKComponentFlexibleSizeRangeProvider"),", a class that conforms to ",Object(i.b)("inlineCode",{parentName:"p"},"CKComponentSizeRangeProviding")," and implements a set of common sizing behaviors where none, either, or both dimensions (width and height) can be constrained to the view's bounding dimensions."),Object(i.b)("h2",null,Object(i.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"layout"})),Object(i.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#layout"}),"#"),"Layout"),Object(i.b)("p",null,"To determine an appropriate size for a component hosting view, call ",Object(i.b)("inlineCode",{parentName:"p"},"-sizeThatFits:")," with the constraining size."),Object(i.b)("p",null,"If an internal state change in the component causes its size to be invalidated, ",Object(i.b)("inlineCode",{parentName:"p"},"CKComponentHostingView")," calls its delegate method ",Object(i.b)("inlineCode",{parentName:"p"},"-componentHostingViewDidInvalidateSize:")," in order to notify the owner of the view that it should resize the view (the view will ",Object(i.b)("strong",{parentName:"p"},"not")," resize itself)."))}d.isMDXComponent=!0}}]);