(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{115:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",function(){return p}),n.d(a,"rightToc",function(){return i}),n.d(a,"default",function(){return l});n(0);var t=n(133),o=(n(134),n(138));function c(){return(c=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function s(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)n=c[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)n=c[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p={title:"Scopes"},i=[{value:"Defining a Scope",id:"defining-a-scope",children:[]},{value:"Scope collisions",id:"scope-collisions",children:[]}],m={rightToc:i},r="wrapper";function l(e){var a=e.components,n=s(e,["components"]);return Object(t.a)(r,c({},m,n,{components:a,mdxType:"MDXLayout"}),Object(t.a)("p",null,"In the following component hierarchy ComponentKit has no way to distinguish the three ",Object(t.a)("inlineCode",{parentName:"p"},"ListItem")," components:"),Object(t.a)(o.a,{src:"assets/tree.png",width:"367",height:"124",alt:"Component Tree",mdxType:"Image"}),Object(t.a)("p",null,"ComponentKit needs a way to uniquely identify each ",Object(t.a)("inlineCode",{parentName:"p"},"ListItem"),". Particularly as the component hierarchy is rebuilt over time:"),Object(t.a)(o.a,{src:"assets/tree-ids.png",width:"367",height:"124",alt:"Component Tree with IDs",mdxType:"Image"}),Object(t.a)("p",null,"Scopes give ComponentKit the ability to assign any component with a persistent identity: ",Object(t.a)("em",{parentName:"p"},"regardless of how many times a component is created it will always acquire the same scope"),". This behavior is required in the following three situations:"),Object(t.a)("ol",null,Object(t.a)("li",{parentName:"ol"},"If a component has ",Object(t.a)("a",c({parentName:"li"},{href:"state.html"}),"state")," it must also define a scope"),Object(t.a)("li",{parentName:"ol"},"If a component has a ",Object(t.a)("a",c({parentName:"li"},{href:"component-controllers.html"}),"component controller")," it must also define a scope"),Object(t.a)("li",{parentName:"ol"},"If a component has children that themselves have state or component controllers it must also define a scope when encountering a scope collision")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"defining-a-scope"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#defining-a-scope"}),"#"),"Defining a Scope"),Object(t.a)("p",null,"Use ",Object(t.a)("inlineCode",{parentName:"p"},"CKComponentScope")," to define a component scope at the top of a component's ",Object(t.a)("inlineCode",{parentName:"p"},"+new")," method."),Object(t.a)("pre",{className:"language-objectivec"},Object(t.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"@implementation")," ListItemComponent\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"+")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"instancetype",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"newWithListItem",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"ListItem ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"listItem\n",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Defines a scope that is uniquely identified by the component's class (i.e. ListItemComponent) and the provided identifier."),"\n  CKComponentScope ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"scope"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"self"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," listItem",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),"uniqueID",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"auto")," c ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"/* ... */"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"return")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"super")," newWithComponent",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"c",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"@end"),"\n")),Object(t.a)("p",null,"If a component does not have a model object with a unique identifier a scope can be defined without one:"),Object(t.a)("pre",{className:"language-objectivec"},Object(t.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"@implementation")," ListComponent\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"+")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"instancetype",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"newWithList",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"List ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"list\n",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Defines a scope that is uniquely identified by the component's class (i.e. ListComponent)."),"\n  CKComponentScope ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"scope"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"self"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"auto")," c ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"/* ... */"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"return")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"super")," newWithComponent",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"c",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"@end"),"\n")),Object(t.a)("p",null,"Omitting the scope's identifier is safe as long as there will not be more than one sibling component of the same type. The example above assumes ",Object(t.a)("inlineCode",{parentName:"p"},"ListComponent"),"'s parent will only ever render one ",Object(t.a)("inlineCode",{parentName:"p"},"ListComponent"),". If that assumption no longer holds then the parent component must specify a unique identifier for scopes of its children. This is when ",Object(t.a)("inlineCode",{parentName:"p"},"CKComponentKey")," is helpful:"),Object(t.a)("pre",{className:"language-objectivec"},Object(t.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"@implementation")," ListsComponent\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"+")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"instancetype",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"newWithList",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"NSArray",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"<"),"List ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),">")," ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"lists\n",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Defines a scope that is uniquely identified by the component's class (i.e. ListComponent)."),"\n  CKComponentScope ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"scope"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"self"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"auto")," c ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"/* ... */"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"return"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"super"),"\n   newWithListComponents",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"\n   CK",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"map"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"lists",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"^"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"List ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),"list",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n     CKComponentKey ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"key"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"@"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"lists indexOfObject",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"list",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n     ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"return")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"ListComponent newWithList",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"list",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n   ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"@end"),"\n")),Object(t.a)("p",null,"ComponentKit's keys are an ",Object(t.a)("a",c({parentName:"p"},{href:"https://facebook.github.io/react/docs/lists-and-keys.html#keys"}),"analogous to the concept of the same name in React"),". They allow the parent component to implicitly provide child components with a unique identifiers ",Object(t.a)("em",{parentName:"p"},"based on its knowledge of the component hierarchy"),". In the ",Object(t.a)("inlineCode",{parentName:"p"},"ListsComponent")," example each ",Object(t.a)("inlineCode",{parentName:"p"},"ListComponent")," is rendered in the order provided. Since the ",Object(t.a)("inlineCode",{parentName:"p"},"ListsComponent")," knows how it will display each ",Object(t.a)("inlineCode",{parentName:"p"},"ListComponent")," it can provide a key based on each ",Object(t.a)("inlineCode",{parentName:"p"},"list"),"'s order in the ",Object(t.a)("inlineCode",{parentName:"p"},"lists")," array."),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"scope-collisions"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#scope-collisions"}),"#"),"Scope collisions"),Object(t.a)("p",null,"Scopes must be uniquely identifiable otherwise ComponentKit will be unable to reliably associate a component with its scope. When ComponentKit cannot uniquely identify two or more scopes then it has encountered a ",Object(t.a)("strong",{parentName:"p"},"scope collision")," and an assertion is raised. To avoid a scope collision either:"),Object(t.a)("ol",null,Object(t.a)("li",{parentName:"ol"},"Define the scope of a component encountering a scope collision with a unique identifier"),Object(t.a)("li",{parentName:"ol"},"Define a key in a parent component when creating children encountering a scope collision")),Object(t.a)("p",null,"The assertion raised by ComponentKit highlights where in the component hierarchy a scope collision is detected. Information provided by the framework includes the name of the component encountering the scope collision and where the component lives in the component hierarchy."))}l.isMDXComponent=!0}}]);