(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{73:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return r}),t.d(n,"rightToc",function(){return s}),t.d(n,"default",function(){return d});t(0);var a=t(131);t(132);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r={title:"Component Hosting View"},s=[{value:"Setting the model",id:"setting-the-model",children:[]},{value:"Size Range Provider",id:"size-range-provider",children:[]},{value:"Layout",id:"layout",children:[]}],l={rightToc:s},c="wrapper";function d(e){var n=e.components,t=o(e,["components"]);return Object(a.a)(c,i({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.a)("p",null,"So you've created a component and now need some way to render it on screen. If your use case involves using components inside a ",Object(a.a)("inlineCode",{parentName:"p"},"UICollectionView"),", you should be using ",Object(a.a)("inlineCode",{parentName:"p"},"CKCollectionViewDataSource"),". However, there are some cases where you want to render a component standalone. ",Object(a.a)("inlineCode",{parentName:"p"},"CKComponentHostingView")," was built for this purpose."),Object(a.a)("h2",null,Object(a.a)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"setting-the-model"})),Object(a.a)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#setting-the-model"}),"#"),"Setting the model"),Object(a.a)("p",null,Object(a.a)("inlineCode",{parentName:"p"},"CKComponentHostingView")," provides a ",Object(a.a)("inlineCode",{parentName:"p"},"updateModel:mode:")," method that you can call to update the model for the hosting view. Similarly a secondary context object is also provided. Updating either model or context will trigger a re-generation of the component in the hosting view."),Object(a.a)("h2",null,Object(a.a)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"size-range-provider"})),Object(a.a)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#size-range-provider"}),"#"),"Size Range Provider"),Object(a.a)("p",null,Object(a.a)("inlineCode",{parentName:"p"},"CKComponentHostingView")," requires a size range provider to be passed into the initializer. The size range provider is an object that responds to a single method (",Object(a.a)("inlineCode",{parentName:"p"},"-sizeRangeForBoundingSize:"),") that calculates a constraining size for a given view bounding size."),Object(a.a)("p",null,"Typically you'll want to use ",Object(a.a)("inlineCode",{parentName:"p"},"CKComponentFlexibleSizeRangeProvider"),", a class that conforms to ",Object(a.a)("inlineCode",{parentName:"p"},"CKComponentSizeRangeProviding")," and implements a set of common sizing behaviors where none, either, or both dimensions (width and height) can be constrained to the view's bounding dimensions."),Object(a.a)("h2",null,Object(a.a)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"layout"})),Object(a.a)("a",i({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#layout"}),"#"),"Layout"),Object(a.a)("p",null,"To determine an appropriate size for a component hosting view, call ",Object(a.a)("inlineCode",{parentName:"p"},"-sizeThatFits:")," with the constraining size."),Object(a.a)("p",null,"If an internal state change in the component causes its size to be invalidated, ",Object(a.a)("inlineCode",{parentName:"p"},"CKComponentHostingView")," calls its delegate method ",Object(a.a)("inlineCode",{parentName:"p"},"-componentHostingViewDidInvalidateSize:")," in order to notify the owner of the view that it should resize the view (the view will ",Object(a.a)("strong",{parentName:"p"},"not")," resize itself)."))}d.isMDXComponent=!0}}]);