(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{55:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",function(){return s}),t.d(a,"rightToc",function(){return p}),t.d(a,"default",function(){return l});t(0);var n=t(133);t(134);function c(){return(c=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function o(e,a){if(null==e)return{};var t,n,c=function(e,a){if(null==e)return{};var t,n,c={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(c[t]=e[t]);return c}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var s={title:"Advanced Views"},p=[],i={rightToc:p},r="wrapper";function l(e){var a=e.components,t=o(e,["components"]);return Object(n.a)(r,c({},i,t,{components:a,mdxType:"MDXLayout"}),Object(n.a)("p",null,"Back in ",Object(n.a)("a",c({parentName:"p"},{href:"views.html"}),"Views")," we glossed over ",Object(n.a)("inlineCode",{parentName:"p"},"CKComponentViewClass")," and ",Object(n.a)("inlineCode",{parentName:"p"},"CKComponentViewAttribute"),". But there's a surprising amount of power hiding here!"),Object(n.a)("p",null,Object(n.a)("inlineCode",{parentName:"p"},"CKComponentViewClass")," describes how to create a ",Object(n.a)("inlineCode",{parentName:"p"},"UIView"),". Usually you pass an Objective-C class like ",Object(n.a)("inlineCode",{parentName:"p"},"[UIImageView class]"),", and ComponentKit will automatically create a view by invoking the designated initializer ",Object(n.a)("inlineCode",{parentName:"p"},"-initWithFrame:"),"."),Object(n.a)("p",null,"But of course, not all views can be created with ",Object(n.a)("inlineCode",{parentName:"p"},"-initWithFrame:"),". For these cases, there's an advanced constructor that takes a function pointer:"),Object(n.a)("pre",{className:"language-objectivec"},Object(n.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(n.a)("span",c({parentName:"code"},{className:"token function"}),"CKComponentViewClass"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"UIView ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),"factory",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(n.a)("p",null,"This allows you to use almost any view with ComponentKit. Here's one example:"),Object(n.a)("pre",{className:"language-objectivec"},Object(n.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"static")," UIView ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),Object(n.a)("span",c({parentName:"code"},{className:"token function"}),"authorViewForOscarWilde"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"return")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"AuthorView alloc",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," initWithName",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token string"}),'@"Oscar Fingal O\'Flahertie Wills Wilde"'),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// ..."),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"CKComponent newWithView",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"&"),"authorViewForOscarWilde",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}")," size",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"50"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"50"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),"\n")),Object(n.a)("div",{class:"note-important"},Object(n.a)("p",null,"However, the factory takes no arguments; you can't pass any properties from a particular component to a view's ",Object(n.a)("code",null,"-init"),", since views must be arbitrarily recycled between components. If your view takes properties in ",Object(n.a)("code",null,"-init"),", one possible pattern is to create a wrapping view with setter methods that tear down and re-create the problematic view as a subview.")),Object(n.a)("p",null,Object(n.a)("inlineCode",{parentName:"p"},"CKComponentViewAttribute")," has similar underpinnings. Usually you pass a ",Object(n.a)("inlineCode",{parentName:"p"},"SEL"),", but under the hood they're basically just arbitrary blocks paired with a unique identifier:"),Object(n.a)("pre",{className:"language-objectivec"},Object(n.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"struct")," CKComponentViewAttribute ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n  std",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"string identifier",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"^"),"applicator",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"id view",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," id value",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"^"),"unapplicator",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"id view",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," id value",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"^"),"updater",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"id view",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," id oldValue",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," id newValue",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(n.a)("p",null,'This allows you to express arbitrarily complex operations on the view, like "call this method with these N arguments". The only restriction is that you must box up the inputs to the block in a single ',Object(n.a)("inlineCode",{parentName:"p"},"id")," so ComponentKit can determine if it has changed across recyclings."),Object(n.a)("div",{class:"note"},Object(n.a)("p",null,"How does passing a ",Object(n.a)("code",null,"Class")," or ",Object(n.a)("code",null,"SEL")," work for these classes? They each have a single-argument constructor that takes a ",Object(n.a)("code",null,"Class"),"/",Object(n.a)("code",null,"SEL")," and creates an object that creates the right thing. C++ implicitly calls this constructor when you pass a ",Object(n.a)("code",null,"Class"),"/",Object(n.a)("code",null,"SEL"),".")))}l.isMDXComponent=!0}}]);