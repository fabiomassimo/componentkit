(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{47:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return a}),t.d(n,"rightToc",function(){return s}),t.d(n,"default",function(){return c});t(0);var o=t(125);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function r(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a={title:"Avoid Local Variables, Use Const"},s=[],l={rightToc:s},p="wrapper";function c(e){var n=e.components,t=r(e,["components"]);return Object(o.b)(p,i({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In your ",Object(o.b)("inlineCode",{parentName:"p"},"+new")," method:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Prefer inlining")," what would otherwise be a single-use temporary local variable."),Object(o.b)("li",{parentName:"ul"},"If inlining isn't possible due to necessary references or code duplication concerns, ",Object(o.b)("strong",{parentName:"li"},"add ",Object(o.b)("inlineCode",{parentName:"strong"},"const"))," to the\nright place to make sure the temporary local variable isn't assignable by  (E.g. ",Object(o.b)("inlineCode",{parentName:"li"},"NSString *const foo"),"\ninstead of ",Object(o.b)("inlineCode",{parentName:"li"},"NSString *foo"),").")),Object(o.b)("p",null,"We avoid reassigning variables because:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"It makes code harder to read and modify")," since dependencies between local variables are hard to visualize."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"It encourages mutating local variables after assignment")," which hides surprising side-effects and changes.")),Object(o.b)("p",null,"Here is a really tangled-up ",Object(o.b)("inlineCode",{parentName:"p"},"+new")," method that is hard to read, understand, or modify:"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-objectivec-redhighlight"})," + (instancetype)newWithArticle:(ArticleModel *)article options:(ArticleOptions)options\n  {\n    NSAttributedString *timestamp = [CKDateFormatter stringFromDate:article.creationTime];\n    HeaderComponent *header =\n    [HeaderComponent\n     newWithTitle:article.title\n     subtitle:timestamp];\n\n    // LOGIC ERROR! timestamp has already been used by header, but no one warns us.\n    if (options & ArticleOptionHideTimestamp) {\n      timestamp = nil;\n    }\n\n    MessageOptions messageOptions = 0;\n    if (options & ArticleOptionShortMessage) {\n      messageOptions |= MessageOptionShort;\n    }\n    MessageComponent *message =\n    [MessageComponent\n     newWithArticle:article\n     options:messageOptions];\n\n    FooterComponent *footer = [FooterComponent newWithArticle:article];\n\n    // SUBOPTIMAL: why did we create the header only to throw it away?\n    // Also, notice how far this is from where we created the header.\n    if (options & ArticleOptionOmitHeader) {\n      header = nil;\n    }\n\n    return [self newWithComponent:\n            [CKFlexboxComponent\n             newWithView:{}\n             size:{}\n             style:{}\n             children{\n               header,\n               message,\n               footer\n             }]];\n  }\n")),Object(o.b)("p",null,"Instead, split out logic into separate components:"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-objectivec"}),"+ (instancetype)newWithArticle:(ArticleModel *)article options:(ArticleOptions)options\n{\n  // Note how there are NO local variables here at all.\n  return [self newWithComponent:\n          [CKFlexboxComponent\n           newWithView:{}\n           size:{}\n           style:{}\n           children:{\n             [ArticleHeaderComponent\n              newWithArticle:article\n              options:headerOptions(options)],\n             [ArticleMessageComponent\n              newWithArticle:article\n              options:messageOptions(options)],\n             [FooterComponent newWithArticle:article]\n           }]];\n}\n\n// Note how this is a pure function mapping from one options bitmask to another.\nstatic ArticleHeaderComponentOptions headerOptions(ArticleOptions options)\n{\n  ArticleHeaderComponentOptions options;\n  if (options & ArticleOptionOmitHeader) {\n    options |= ArticleHeaderComponentOptionOmit;\n  }\n  if (options & ArticleOptionHideTimestamp) {\n    options |= ArticleHeaderComponentOptionHideTimestamp;\n  }\n  return options;\n}\n")))}c.isMDXComponent=!0}}]);