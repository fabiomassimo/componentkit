(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return l}),n.d(t,"rightToc",function(){return r}),n.d(t,"default",function(){return s});n(0);var o=n(125);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l={title:"Layout"},r=[{value:"Layout Components",id:"layout-components",children:[]},{value:"Implementing computeLayoutThatFits:",id:"implementing-computelayoutthatfits",children:[]}],p={rightToc:r},c="wrapper";function s(e){var t=e.components,n=i(e,["components"]);return Object(o.b)(c,a({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"UIView")," instances store position and size in their ",Object(o.b)("inlineCode",{parentName:"p"},"center")," and ",Object(o.b)("inlineCode",{parentName:"p"},"bounds")," properties. As constraints change, Core Animation performs a layout pass to call ",Object(o.b)("inlineCode",{parentName:"p"},"layoutSubviews"),", asking views to update these properties on their subviews."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"CKComponent")," instances do not have any size or position information. Instead, ComponentKit calls the ",Object(o.b)("inlineCode",{parentName:"p"},"layoutThatFits:")," method with a given size constraint and the component must ",Object(o.b)("em",{parentName:"p"},"return")," a structure describing both its size, and the position and sizes of its children."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-objectivec"}),"struct CKComponentLayout {\n  CKComponent *component;\n  CGSize size;\n  std::vector<CKComponentLayoutChild> children;\n};\n\nstruct CKComponentLayoutChild {\n  CGPoint position;\n  CKComponentLayout layout;\n};\n")),Object(o.b)("h2",null,Object(o.b)("a",a({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"layout-components"})),Object(o.b)("a",a({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#layout-components"}),"#"),"Layout Components"),Object(o.b)("p",null,"ComponentKit includes a library of components that can be composed to declaratively specify a layout."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CKFlexboxComponent")," is based on a simplified version of ",Object(o.b)("a",a({parentName:"li"},{href:"http://www.w3.org/TR/css3-flexbox/"}),"CSS flexbox"),". It allows you to stack components vertically or horizontally and specify how they should be flexed and aligned to fit in the available space."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CKInsetComponent")," applies an inset margin around a component."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CKBackgroundLayoutComponent")," lays out a component, stretching another component behind it as a backdrop."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CKOverlayLayoutComponent")," lays out a component, stretching another component on top of it as an overlay."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CKCenterLayoutComponent")," centers a component in the available space."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CKRatioLayoutComponent")," lays out a component at a fixed aspect ratio."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CKStaticLayoutComponent")," allows positioning children at fixed offsets.")),Object(o.b)("h2",null,Object(o.b)("a",a({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"implementing-computelayoutthatfits"})),Object(o.b)("a",a({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#implementing-computelayoutthatfits"}),"#"),"Implementing computeLayoutThatFits:"),Object(o.b)("p",null,"If the components above aren't powerful enough, you can implement ",Object(o.b)("inlineCode",{parentName:"p"},"computeLayoutThatFits:")," manually. This method passes you a ",Object(o.b)("inlineCode",{parentName:"p"},"CKSizeRange")," that specifies a min size and a max size. Choose any size in the given range, then return a ",Object(o.b)("inlineCode",{parentName:"p"},"CKComponentLayout")," structure with the layout of child components."),Object(o.b)("p",null,"For sample implementations of ",Object(o.b)("inlineCode",{parentName:"p"},"computeLayoutThatFits:"),", check out the layout components in ComponentKit itself!"))}s.isMDXComponent=!0}}]);