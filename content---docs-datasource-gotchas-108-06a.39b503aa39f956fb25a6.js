(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{89:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",function(){return s}),t.d(a,"rightToc",function(){return p}),t.d(a,"default",function(){return r});t(0);var n=t(133);t(134);function c(){return(c=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function o(e,a){if(null==e)return{};var t,n,c=function(e,a){if(null==e)return{};var t,n,c={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(c[t]=e[t]);return c}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var s={title:"Gotchas"},p=[{value:"Don't forget the initial section",id:"dont-forget-the-initial-section",children:[]},{value:"Lifecycle",id:"lifecycle",children:[]},{value:"The datasource involves asynchronous operations",id:"the-datasource-involves-asynchronous-operations",children:[]}],m={rightToc:p},i="wrapper";function r(e){var a=e.components,t=o(e,["components"]);return Object(n.a)(i,c({},m,t,{components:a,mdxType:"MDXLayout"}),Object(n.a)("h2",null,Object(n.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"dont-forget-the-initial-section"})),Object(n.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#dont-forget-the-initial-section"}),"#"),"Don't forget the initial section"),Object(n.a)("p",null,"A datasource will initially be totally empty (no items and no sections). Inserting items in section 0 before inserting section 0 will cause an exception to be raised."),Object(n.a)("pre",{className:"language-objectivec"},Object(n.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),"CKComponentCollectionViewDataSource datasource ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"CKComponentCollectionViewDataSource alloc",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\nCKArrayControllerInputItems items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\nCKArrayControllerSections sections",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\nsections",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(n.a)("span",c({parentName:"code"},{className:"token function"}),"insert"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\nitems",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(n.a)("span",c({parentName:"code"},{className:"token function"}),"insert"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.a)("span",c({parentName:"code"},{className:"token string"}),'@"Hello"'),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"datasource enqueueChangeset",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"sections",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(n.a)("div",{class:"note"},Object(n.a)("p",null,"Why not have one section by default? Because implicit/default behaviors can be confusing. If that behavior was implemented as a default but not documented, it would be very confusing when inserting a section at index 0 on a newly created datasource will actually cause it to have two sections (we already have the one created by default). Obviously documentation would make things better but it's easy to miss a piece of documentation...")),Object(n.a)("h2",null,Object(n.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"lifecycle"})),Object(n.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#lifecycle"}),"#"),"Lifecycle"),Object(n.a)("p",null,"The lifecycle of the datasource should match the lifecycle of the collection view or table view it is used with. You might otherwise end up with the content of your list view being out of sync with the internal state of the datasource and this will cause a crash eventually."),Object(n.a)("h2",null,Object(n.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"the-datasource-involves-asynchronous-operations"})),Object(n.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#the-datasource-involves-asynchronous-operations"}),"#"),"The datasource involves asynchronous operations"),Object(n.a)("p",null,Object(n.a)("strong",{parentName:"p"},"Each changeset is computed asynchronously")," by ",Object(n.a)("inlineCode",{parentName:"p"},"CKComponentDatasource"),", therefore the corresponding changes are not reflected immediately on the corresponding ",Object(n.a)("inlineCode",{parentName:"p"},"UITableView")," or ",Object(n.a)("inlineCode",{parentName:"p"},"UICollectionView")," and it is important to be careful about sources of data being out of sync."),Object(n.a)("h4",null,Object(n.a)("a",c({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"always-ask-the-datasource-for-the-model-corresponding-to-an-index-path"})),Object(n.a)("a",c({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#always-ask-the-datasource-for-the-model-corresponding-to-an-index-path"}),"#"),"Always ask the datasource for the model corresponding to an index path"),Object(n.a)("p",null,"The datasource maintains an internal data structure which is the only source of truth for the corresponding ",Object(n.a)("inlineCode",{parentName:"p"},"UICollectionView")," or ",Object(n.a)("inlineCode",{parentName:"p"},"UITableView"),". For this reason you should query the datasource to get information associated with a certain indexPath. Any other source of data may be out of sync with the current state of the list view."),Object(n.a)("p",null,"For instance to access the model associated to a certain index path using a ",Object(n.a)("inlineCode",{parentName:"p"},"CKCollectionViewDataSource")," you can use:"),Object(n.a)("pre",{className:"language-objectivec"},Object(n.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"datasource modelForItemAtIndexPath",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"indexPath",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(n.a)("p",null,"Now let's look at what could go wrong if we query another source of data."),Object(n.a)("pre",{className:"language-objectivec"},Object(n.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"@implementation")," MyAwesomeController ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n    CKComponentCollectionViewDataSource ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),"_datasource",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n    NSMutableArray ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),"_listOfModels",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"-")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"insertAtHead",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"id",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"model ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// We first add the new model (B) at the beginning of _listOfModels which already contained (A)"),"\n    ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// [A] -> [B, A]"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_listOfModels insertObject",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"model atIndex",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  CKArrayControllerInputItems items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(n.a)("span",c({parentName:"code"},{className:"token function"}),"insert"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// Enqueue the changeset asynchronously in the datasource"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_datasource enqueueChangeset",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"-")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"didSelectitemAtIndexPath",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"NSIndexPath ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"indexPath ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// At the same time the user taps on the cell that represents A, which is still located at the indexPath (0,0)"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// as the changeset has not finished computing yet."),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// Ouch we actually get B, list of models and the collection view are out of sync"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_listOfModels objectAtIndex",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"indexPath",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),"row",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// [_datasource modelForItemAtIndexPath:indexPath] would have properly returned A"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(n.a)("h4",null,Object(n.a)("a",c({parentName:"h4"},{"aria-hidden":!0,className:"anchor",id:"dont-ask-the-the-list-view-for-the-position-of-the-next-insertion"})),Object(n.a)("a",c({parentName:"h4"},{"aria-hidden":!0,className:"hash-link",href:"#dont-ask-the-the-list-view-for-the-position-of-the-next-insertion"}),"#"),"Don't ask the the list view for the position of the next insertion"),Object(n.a)("p",null,"The datasource gives you the current state of what is displayed on the screen, but it doesn't include what is potentially currently being computed in the background. To get this information you need to maintain state that is updated at the same time as a changeset is enqueued."),Object(n.a)("p",null,"Let's look at this buggy code that uses the datasource to compute the insertion index."),Object(n.a)("p",null,"{: .redhighlight }"),Object(n.a)("pre",{className:"language-objectivec"},Object(n.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"@implementation")," MyAwesomeController ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n    CKComponentCollectionViewDataSource ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),"_datasource",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n    NSMutableArray ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"*"),"_listOfModels",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"-")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"insertAtTail",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"id",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"model ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// We first add the new model (C) at the end of _listOfModels which already contains (A) et (B)"),"\n    ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// [A, B] -> [A, B, C]"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_listOfModels addObject",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"model",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  CKArrayControllerInputItems items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// Only A is in the tableView, the components for B are still computed in the background"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// so numberOfItemsInSection returns 1, C will be inserted at index 1 and we will end up"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// with a list view displaying [A, C, B]"),"\n  Items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(n.a)("span",c({parentName:"code"},{className:"token function"}),"insert"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," _datasource",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),"collectionView numberOfItemsInSection",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// Enqueue the changeset asynchronously in the datasource"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_datasource enqueueChangeset",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(n.a)("p",null,"In ",Object(n.a)("inlineCode",{parentName:"p"},"-insertAtTail")," we should check ",Object(n.a)("inlineCode",{parentName:"p"},"_listOfModels")," instead to compute the insertion index."),Object(n.a)("pre",{className:"language-objectivec"},Object(n.a)("code",c({parentName:"pre"},{className:"language-objectivec",metastring:"highlight",highlight:!0}),Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"-")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token keyword"}),"void"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"insertAtTail",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"id",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"model ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// We first add the new model (C) at the end of _listOfModels which already contains (A) et (B)"),"\n    ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// [A, B] -> [A, B, C]"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_listOfModels addObject",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),"model",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  CKArrayControllerInputItems items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// We properly insert C at index 2"),"\n  Items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(n.a)("span",c({parentName:"code"},{className:"token function"}),"insert"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_listOfModels count",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"?")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_listOfModels count",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.a)("span",c({parentName:"code"},{className:"token operator"}),"-"),Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"1")," ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(n.a)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token comment"}),"// Enqueue the changeset asynchronously in the datasource"),"\n  ",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"["),"_datasource enqueueChangeset",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),":"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," items",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n")))}r.isMDXComponent=!0}}]);