(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return i}),n.d(t,"rightToc",function(){return c}),n.d(t,"default",function(){return p});n(0);var a=n(125);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i={title:"Changeset API"},c=[{value:"Order in which changes are applied.",id:"order-in-which-changes-are-applied",children:[]}],s={rightToc:c},l="wrapper";function p(e){var t=e.components,n=r(e,["components"]);return Object(a.b)(l,o({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,'Changesets are how you interact with the datasource. They allow you to "enqueue" sets of commands to be processed by the datasource.'),Object(a.b)("p",null,"These commands can be seen as a sentence with three parts :"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("strong",{parentName:"li"},"action")," (insert/delete/udpate for items, insert/delete for sections)"),Object(a.b)("li",{parentName:"ol"},Object(a.b)("strong",{parentName:"li"},"position specifier")," (indexPath for items, index for sections)"),Object(a.b)("li",{parentName:"ol"},Object(a.b)("strong",{parentName:"li"},"model")," (that will be used to compute the components)")),Object(a.b)("p",null,"Here is some sample code, showing how to create a changeset - As you can see changesets are a c++ structure."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-objectivec"}),'CKArrayControllerInputItems items;\n// Insert an item at index 0 in section 0 and compute the component for the model @"Hello"\nitems.insert({0, 0}, @"Hello");\n// Update the item at index 1 in section 0 and update it with the component computed for the model @"World"\nitems.update({0, 1}, @"World");\n// Delete the item at index 2 in section 0, no need for a model here :)\nitems.delete({0, 2});\n\nSections sections;\nsections.insert(0);\nsections.insert(2);\nsections.insert(3);\n\n[datasource enqueueChangeset:{sections, items}];\n')),Object(a.b)("p",null,"Changes can also be created from ",Object(a.b)("inlineCode",{parentName:"p"},"NSIndexPaths")," :"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-objectivec"}),'CKArrayControllerInputItems items;\nNSIndexPath *insertionIndexPath = [NSIndexPath indexPathForItem:0 inSection:0];\nitems.insert({insertionIndexPath}, @"Hello");\n')),Object(a.b)("p",null,"You can even get rid of the brackets around the ",Object(a.b)("inlineCode",{parentName:"p"},"NSIndexPath"),", thanks to ",Object(a.b)("a",o({parentName:"p"},{href:"http://en.cppreference.com/w/cpp/language/converting_constructor"}),"C++ converting constructors")," :"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-objectivec"}),'CKArrayControllerInputItems items;\nNSIndexPath *insertionIndexPath = [NSIndexPath indexPathForItem:0 inSection:0];\nitems.insert(insertionIndexPath, @"Hello");\n')),Object(a.b)("h2",null,Object(a.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"order-in-which-changes-are-applied"})),Object(a.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#order-in-which-changes-are-applied"}),"#"),"Order in which changes are applied."),Object(a.b)("div",{class:"note-important"},Object(a.b)("p",null,"The order in which commands are added to the changeset doesn't define the order in which those changes will eventually be applied to the ",Object(a.b)("inlineCode",{parentName:"p"},"UICollectionView")," (same for ",Object(a.b)("inlineCode",{parentName:"p"},"UITableViews"),").")),Object(a.b)("p",null,"Be wary of this fact while computing a changeset, the conventions defined in Cocoa for batch updates are as follows:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Deletions and Updates are applied first using the current index space.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Insertions are then applied in the post deletions index space (updates obviously won't modify the index space)."))),Object(a.b)("p",null,"You can consult the ",Object(a.b)("a",o({parentName:"p"},{href:"https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/TableView_iPhone/ManageInsertDeleteRow/ManageInsertDeleteRow.html"}),"following section")," in the Apple documentation to get more information."))}p.isMDXComponent=!0}}]);